using Core.Implementations;
using Core.Interfaces;
using Infrastructure.Context;
using Infrastructure.DataAccess;
using MongoDB.Bson.Serialization.Serializers;
using MongoDB.Bson;
using Infrastructure.Mappers;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options => {
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        In = ParameterLocation.Header,
        Description = "Introduce JWT Token generated by Auth Url"
    });
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                },
                Scheme = "oauth2",
                Name = "Bearer",
                In = ParameterLocation.Header,
            },
            new string[] { }
        }
    });
});

builder.Services.AddAutoMapper(config => config.AddProfile<NewUserMapper>());
builder.Services.AddAutoMapper(config => config.AddProfile<UpdateUserMapper>());

var mongoSettings = builder.Configuration.GetSection("MongoDbSettings");
var jwtSettings = builder.Configuration.GetSection("JwtSettings");

var connectionString = mongoSettings["ConnectionString"];
var databaseName = mongoSettings["DatabaseName"];

var secretKey = jwtSettings["SecretKey"];
var validAudience = jwtSettings["ValidAudience"];
var validIssuer = jwtSettings["ValidIssuer"];

builder.Services.AddSingleton(provider => new LiteContext("UserDb.db"));
builder.Services.AddSingleton(provider => new MongoContext(connectionString, databaseName));

var key = Encoding.ASCII.GetBytes(builder.Configuration["JwtSettings:SecretKey"]);
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(key),
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidIssuer = builder.Configuration["JwtSettings:ValidIssuer"],
        ValidAudience = builder.Configuration["JwtSettings:ValidAudience"]
    };
});

builder.Services.AddAuthorization();

builder.Services.AddScoped<CreateNewUser>();
builder.Services.AddScoped<GetUser>();
builder.Services.AddScoped<GetAllUsers>();
builder.Services.AddScoped<UpdateExistingUser>();
builder.Services.AddScoped<DeleteExistingUser>();
builder.Services.AddScoped<GetUserByUsername>();

//Register Repositories
builder.Services.AddScoped<IUserRepository, UserRepositoryLiteDb>();
builder.Services.AddScoped<IUserRepository, UserRepositoryMongoDb>();

MongoDB.Bson.Serialization.BsonSerializer.RegisterSerializer(new GuidSerializer(GuidRepresentation.Standard));

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();
app.UseAuthentication();    

app.MapControllers();

app.Run();
